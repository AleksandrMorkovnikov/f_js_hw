// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

const musicCollection = {
    albums: [
        { title: "Актриса Весна", artist: "ДДТ", year: 1992 },
        { title: "Шабаш ", artist: "Алиса", year: 1991 },
        { title: "Горгород", artist: "Oxxxymiron", year: 2015 },
        { title: "Esco di rado e parlo ancora meno", artist: "Адриано Челентано", year: 2000 },
        { title: "Радость встреч и расставаний ", artist: "25/17", year: 2023 },
    ],
    [Symbol.iterator]() {
        let index = 0;
        let albums = this.albums;
        return {
            next() {
                if (index < albums.length) {
                    return { value: albums[index++], done: false };
                } else {
                    return { done: true };
                }
            }
        };
    }
};

for (const album of musicCollection) {
    console.log(`${album.title} - ${album.artist} (${album.year})`);
}

// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.


const chefs = new Map();
chefs.set('Виктор', 'Пицца');
chefs.set('Ольга', 'Суши');
chefs.set('Дмитрий', 'Десерты');

const dishes = new Map();
dishes.set('Пицца "Маргарита"', 'Виктор');
dishes.set('Пицца "Пепперони"', 'Виктор');
dishes.set('Суши "Филадельфия"', 'Ольга');
dishes.set('Суши "Калифорния"', 'Ольга');
dishes.set('Тирамису', 'Дмитрий');
dishes.set('Чизкейк', 'Дмитрий');

const client1 = { name: 'Алексей' };
const client2 = { name: 'Мария' };
const client3 = { name: 'Ирина' };

const orders = new Map();
orders.set(client1, ['Пицца "Пепперони"', 'Тирамису']);
orders.set(client2, ['Суши "Калифорния"', 'Пицца "Маргарита"']);
orders.set(client3, ['Чизкейк']);


function displayOrders(orders) {
    for (const [client, dishes] of orders.entries()) {
        console.log(`Клиент ${client.name} заказал: ${dishes.join(', ')}`);
    }
}

function displayChefsForDishes(dishes) {
    for (const [dish, chef] of dishes.entries()) {
        console.log(`Блюдо "${dish}" готовит повар: ${chef}`);
    }
}

displayOrders(orders);

displayChefsForDishes(dishes);